============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /usr/bin/python3
cachedir: .pytest_cache
rootdir: /home/blaked/CSE524/Project/APC524_Project
configfile: pyproject.toml
testpaths: tests
plugins: anyio-4.6.0
collecting ... collected 13 items

tests/test_MB_dist_basic.py::test_get_speeds[particles0-expected_speeds0] PASSED [  7%]
tests/test_MB_dist_basic.py::test_get_speeds[particles1-expected_speeds1] PASSED [ 15%]
tests/test_MB_dist_basic.py::test_get_speeds[particles2-expected_speeds2] PASSED [ 23%]
tests/test_MB_dist_basic.py::test_get_speeds[particles3-expected_speeds3] PASSED [ 30%]
tests/test_MB_dist_basic.py::test_get_speeds_empty FAILED                [ 38%]
tests/test_MB_dist_basic.py::test_get_KE PASSED                          [ 46%]
tests/test_MB_dist_basic.py::test_MDSimulation_init FAILED               [ 53%]
tests/test_MB_dist_basic.py::test_MDSimulation_advance_with_collision FAILED [ 61%]
tests/test_MB_dist_basic.py::test_MDSimulation_advance_without_collision FAILED [ 69%]
tests/test_MB_dist_basic.py::test_MDSimulation_boundary_reflection FAILED [ 76%]
tests/test_MB_dist_basic.py::test_Histogram_init PASSED                  [ 84%]
tests/test_MB_dist_basic.py::test_Histogram_update PASSED                [ 92%]
tests/test_MB_dist_basic.py::test_MDSimulation_reaction FAILED           [100%]

=================================== FAILURES ===================================
____________________________ test_get_speeds_empty _____________________________

    def test_get_speeds_empty():
        particles = []
        expected_speeds = np.array([])
    
>       computed_speeds = get_speeds(particles)

expected_speeds = array([], dtype=float64)
particles  = []

tests/test_MB_dist_basic.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

particles = []

    def get_speeds(particles):
        """Return the magnitude of the (n,2) array of velocities, vel."""
        vel = np.array([p.vel for p in particles])
>       return np.hypot(vel[:, X], vel[:, Y])
E       IndexError: too many indices for array: array is 1-dimensional, but 2 were indexed

particles  = []
vel        = array([], dtype=float64)

src/MB_dist.py:172: IndexError
____________________________ test_MDSimulation_init ____________________________

particle_A = <species_and_particle.Particle object at 0x7f7c5ee8fc40>
particle_B = <species_and_particle.Particle object at 0x7f7c5ee8fbb0>

    def test_MDSimulation_init(particle_A, particle_B):
        sim = MDSimulation([particle_A, particle_B])
    
        assert sim.n == 2
>       assert sim.r == particle_A.radius  # Assuming all particles have the same radius
E       AttributeError: 'MDSimulation' object has no attribute 'r'

particle_A = <species_and_particle.Particle object at 0x7f7c5ee8fc40>
particle_B = <species_and_particle.Particle object at 0x7f7c5ee8fbb0>
sim        = <MB_dist.MDSimulation object at 0x7f7c5ee8f820>

tests/test_MB_dist_basic.py:120: AttributeError
___________________ test_MDSimulation_advance_with_collision ___________________

    def test_MDSimulation_advance_with_collision():
>       p1, p2 = simulation.particles
E       AttributeError: 'function' object has no attribute 'particles'


tests/test_MB_dist_basic.py:128: AttributeError
_________________ test_MDSimulation_advance_without_collision __________________

    def test_MDSimulation_advance_without_collision():
        p1 = Particle(species_A, np.array([0.2, 0.2]), np.array([1.0, 0.0]))
        p2 = Particle(species_B, np.array([0.8, 0.8]), np.array([0.0, 1.0]))
    
        sim = MDSimulation([p1, p2])
        dt = 0.1
>       sim.advance(dt)

dt         = 0.1
p1         = <species_and_particle.Particle object at 0x7f7c5ee29e40>
p2         = <species_and_particle.Particle object at 0x7f7c5ee29bd0>
sim        = <MB_dist.MDSimulation object at 0x7f7c5ee2a020>

tests/test_MB_dist_basic.py:170: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/MB_dist.py:42: in advance
    radii = np.array([p.radius for p in self.particles])
        dist_matrix = array([[       inf, 0.86023253],
       [0.86023253,        inf]])
        dt         = 0.1
        p          = <species_and_particle.Particle object at 0x7f7c5ee29bd0>
        pos_array  = array([[0.3, 0.2],
       [0.8, 0.9]])
        self       = <MB_dist.MDSimulation object at 0x7f7c5ee2a020>
src/MB_dist.py:42: in <listcomp>
    radii = np.array([p.radius for p in self.particles])
        .0         = <list_iterator object at 0x7f7c5ee29d80>
        p          = <species_and_particle.Particle object at 0x7f7c5ee29e40>
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <species_and_particle.Particle object at 0x7f7c5ee29e40>

    @property
    def radius(self):
>       return self.species.radius
E       AttributeError: 'function' object has no attribute 'radius'

self       = <species_and_particle.Particle object at 0x7f7c5ee29e40>

src/species_and_particle.py:26: AttributeError
____________________ test_MDSimulation_boundary_reflection _____________________

    def test_MDSimulation_boundary_reflection():
        # Create particles positioned to collide with walls
        p1 = Particle(species_A, np.array([0.05, 0.5]), np.array([-1.0, 0.0]))  # Left wall
        p2 = Particle(species_B, np.array([0.95, 0.5]), np.array([1.0, 0.0]))   # Right wall
    
        sim = MDSimulation([p1, p2])
        dt = 0.1
>       sim.advance(dt)

dt         = 0.1
p1         = <species_and_particle.Particle object at 0x7f7c5edc7490>
p2         = <species_and_particle.Particle object at 0x7f7c5edc72b0>
sim        = <MB_dist.MDSimulation object at 0x7f7c5edc72e0>

tests/test_MB_dist_basic.py:191: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/MB_dist.py:42: in advance
    radii = np.array([p.radius for p in self.particles])
        dist_matrix = array([[inf, 1.1],
       [1.1, inf]])
        dt         = 0.1
        p          = <species_and_particle.Particle object at 0x7f7c5edc72b0>
        pos_array  = array([[-0.05,  0.5 ],
       [ 1.05,  0.5 ]])
        self       = <MB_dist.MDSimulation object at 0x7f7c5edc72e0>
src/MB_dist.py:42: in <listcomp>
    radii = np.array([p.radius for p in self.particles])
        .0         = <list_iterator object at 0x7f7c5edc7610>
        p          = <species_and_particle.Particle object at 0x7f7c5edc7490>
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <species_and_particle.Particle object at 0x7f7c5edc7490>

    @property
    def radius(self):
>       return self.species.radius
E       AttributeError: 'function' object has no attribute 'radius'

self       = <species_and_particle.Particle object at 0x7f7c5edc7490>

src/species_and_particle.py:26: AttributeError
__________________________ test_MDSimulation_reaction __________________________

species_A = <species_and_particle.Species object at 0x7f7c5ee351e0>
species_B = <species_and_particle.Species object at 0x7f7c5ee35390>
species_C = <species_and_particle.Species object at 0x7f7c5ee35030>

    def test_MDSimulation_reaction(species_A, species_B, species_C):
        # Create species A and B particles positioned to collide
        p1 = Particle(species_A, np.array([0.4, 0.5]), np.array([1.0, 0.0]))
        p2 = Particle(species_B, np.array([0.6, 0.5]), np.array([-1.0, 0.0]))
    
        sim = MDSimulation([p1, p2])
        dt = 0.1
        sim.advance(dt)
    
        # After advance, particles should have reacted to form a new C particle
>       assert len(sim.particles) == 1  # Only species C remains
E       assert 2 == 1
E        +  where 2 = len([<species_and_particle.Particle object at 0x7f7c5ee37e80>, <species_and_particle.Particle object at 0x7f7c5ee353f0>])
E        +    where [<species_and_particle.Particle object at 0x7f7c5ee37e80>, <species_and_particle.Particle object at 0x7f7c5ee353f0>] = <MB_dist.MDSimulation object at 0x7f7c5ee35360>.particles

dt         = 0.1
p1         = <species_and_particle.Particle object at 0x7f7c5ee37e80>
p2         = <species_and_particle.Particle object at 0x7f7c5ee353f0>
sim        = <MB_dist.MDSimulation object at 0x7f7c5ee35360>
species_A  = <species_and_particle.Species object at 0x7f7c5ee351e0>
species_B  = <species_and_particle.Species object at 0x7f7c5ee35390>
species_C  = <species_and_particle.Species object at 0x7f7c5ee35030>

tests/test_MB_dist_basic.py:246: AssertionError
=========================== short test summary info ============================
FAILED tests/test_MB_dist_basic.py::test_get_speeds_empty - IndexError: too m...
FAILED tests/test_MB_dist_basic.py::test_MDSimulation_init - AttributeError: ...
FAILED tests/test_MB_dist_basic.py::test_MDSimulation_advance_with_collision
FAILED tests/test_MB_dist_basic.py::test_MDSimulation_advance_without_collision
FAILED tests/test_MB_dist_basic.py::test_MDSimulation_boundary_reflection - A...
FAILED tests/test_MB_dist_basic.py::test_MDSimulation_reaction - assert 2 == 1
========================= 6 failed, 7 passed in 0.88s ==========================
