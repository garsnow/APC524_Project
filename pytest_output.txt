============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /usr/bin/python3
cachedir: .pytest_cache
rootdir: /home/blaked/CSE524/Project/APC524_Project
configfile: pyproject.toml
testpaths: tests
plugins: anyio-4.6.0
collecting ... collected 13 items

tests/test_MB_dist_basic.py::test_get_speeds[particles0-expected_speeds0] PASSED [  7%]
tests/test_MB_dist_basic.py::test_get_speeds[particles1-expected_speeds1] PASSED [ 15%]
tests/test_MB_dist_basic.py::test_get_speeds[particles2-expected_speeds2] PASSED [ 23%]
tests/test_MB_dist_basic.py::test_get_speeds[particles3-expected_speeds3] PASSED [ 30%]
tests/test_MB_dist_basic.py::test_get_speeds_empty PASSED                [ 38%]
tests/test_MB_dist_basic.py::test_get_KE PASSED                          [ 46%]
tests/test_MB_dist_basic.py::test_MDSimulation_init PASSED               [ 53%]
tests/test_MB_dist_basic.py::test_MDSimulation_advance_with_collision FAILED [ 61%]
tests/test_MB_dist_basic.py::test_MDSimulation_advance_without_collision PASSED [ 69%]
tests/test_MB_dist_basic.py::test_MDSimulation_boundary_reflection PASSED [ 76%]
tests/test_MB_dist_basic.py::test_Histogram_init PASSED                  [ 84%]
tests/test_MB_dist_basic.py::test_Histogram_update PASSED                [ 92%]
tests/test_MB_dist_basic.py::test_MDSimulation_reaction FAILED           [100%]

=================================== FAILURES ===================================
___________________ test_MDSimulation_advance_with_collision ___________________

simulation_elastic = <src.MB_dist.MDSimulation object at 0x7f6a8d5426e0>
species_A = <src.species_and_particle.Species object at 0x7f6a8d542b30>

    def test_MDSimulation_advance_with_collision(simulation_elastic, species_A):
        p1, p2 = simulation_elastic.particles
    
        pos_before = p1.pos.copy()
        vel_before = p1.vel.copy()
        pos_before_p2 = p2.pos.copy()
        vel_before_p2 = p2.vel.copy()
    
         # Advance the simulation
        dt = 0.1
        simulation_elastic.advance(dt)
    
        expected_pos_p1 = pos_before + vel_before * dt
        expected_pos_p2 = pos_before_p2 + vel_before_p2 * dt
    
        expected_vel_p1 = vel_before_p2  # [-1.0, 0.0]
        expected_vel_p2 = vel_before      # [1.0, 0.0]
    
        np.testing.assert_array_almost_equal(p1.pos, expected_pos_p1)
        np.testing.assert_array_almost_equal(p2.pos, expected_pos_p2)
>       np.testing.assert_array_almost_equal(p1.vel, expected_vel_p1)

dt         = 0.1
expected_pos_p1 = array([0.55, 0.5 ])
expected_pos_p2 = array([0.45, 0.5 ])
expected_vel_p1 = array([-1.,  0.])
expected_vel_p2 = array([1., 0.])
p1         = <src.species_and_particle.Particle object at 0x7f6a8d542b00>
p2         = <src.species_and_particle.Particle object at 0x7f6a8d5427d0>
pos_before = array([0.45, 0.5 ])
pos_before_p2 = array([0.55, 0.5 ])
simulation_elastic = <src.MB_dist.MDSimulation object at 0x7f6a8d5426e0>
species_A  = <src.species_and_particle.Species object at 0x7f6a8d542b30>
vel_before = array([1., 0.])
vel_before_p2 = array([-1.,  0.])

tests/test_MB_dist_basic.py:157: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (array([1., 0.]), array([-1.,  0.])), kwargs = {}, old_name = 'y'
new_name = 'desired'

    @functools.wraps(fun)
    def wrapper(*args, **kwargs):
        for old_name, new_name in zip(old_names, new_names):
            if old_name in kwargs:
                if dep_version:
                    end_version = dep_version.split('.')
                    end_version[1] = str(int(end_version[1]) + 2)
                    end_version = '.'.join(end_version)
                    msg = (f"Use of keyword argument `{old_name}` is "
                           f"deprecated and replaced by `{new_name}`. "
                           f"Support for `{old_name}` will be removed "
                           f"in NumPy {end_version}.")
                    warnings.warn(msg, DeprecationWarning, stacklevel=2)
                if new_name in kwargs:
                    msg = (f"{fun.__name__}() got multiple values for "
                           f"argument now known as `{new_name}`")
                    raise TypeError(msg)
                kwargs[new_name] = kwargs.pop(old_name)
>       return fun(*args, **kwargs)
E       AssertionError: 
E       Arrays are not almost equal to 6 decimals
E       
E       Mismatched elements: 1 / 2 (50%)
E       Max absolute difference among violations: 2.
E       Max relative difference among violations: 2.
E        ACTUAL: array([1., 0.])
E        DESIRED: array([-1.,  0.])

args       = (array([1., 0.]), array([-1.,  0.]))
dep_version = '2.0.0'
fun        = <function assert_array_almost_equal at 0x7f6aa89892d0>
kwargs     = {}
new_name   = 'desired'
new_names  = ['actual', 'desired']
old_name   = 'y'
old_names  = ['x', 'y']

../../../.local/lib/python3.10/site-packages/numpy/_utils/__init__.py:85: AssertionError
__________________________ test_MDSimulation_reaction __________________________

simulation_reaction = <src.MB_dist.MDSimulation object at 0x7f6a8d5bb760>
species_A = <src.species_and_particle.Species object at 0x7f6a8d5bb8b0>
species_B = <src.species_and_particle.Species object at 0x7f6a8d5bb7f0>
species_C = <src.species_and_particle.Species object at 0x7f6a8d5bb7c0>

    def test_MDSimulation_reaction(simulation_reaction, species_A, species_B, species_C):
        p1, p2 = simulation_reaction.particles
    
        pos_before = p1.pos.copy()
        vel_before = p1.vel.copy()
        pos_before_p2 = p2.pos.copy()
        vel_before_p2 = p2.vel.copy()
    
        # Advance the simulation
        dt = 0.1
        simulation_reaction.advance(dt)
    
        # After advance, particles should have reacted to form a new C particle
>       assert len(simulation_reaction.particles) == 1  # Only species C remains
E       assert 2 == 1
E        +  where 2 = len([<src.species_and_particle.Particle object at 0x7f6a8d5bbbe0>, <src.species_and_particle.Particle object at 0x7f6a8d5bb910>])
E        +    where [<src.species_and_particle.Particle object at 0x7f6a8d5bbbe0>, <src.species_and_particle.Particle object at 0x7f6a8d5bb910>] = <src.MB_dist.MDSimulation object at 0x7f6a8d5bb760>.particles

dt         = 0.1
p1         = <src.species_and_particle.Particle object at 0x7f6a8d5bbbe0>
p2         = <src.species_and_particle.Particle object at 0x7f6a8d5bb910>
pos_before = array([0.2, 0.5])
pos_before_p2 = array([0.8, 0.5])
simulation_reaction = <src.MB_dist.MDSimulation object at 0x7f6a8d5bb760>
species_A  = <src.species_and_particle.Species object at 0x7f6a8d5bb8b0>
species_B  = <src.species_and_particle.Species object at 0x7f6a8d5bb7f0>
species_C  = <src.species_and_particle.Species object at 0x7f6a8d5bb7c0>
vel_before = array([1., 0.])
vel_before_p2 = array([-1.,  0.])

tests/test_MB_dist_basic.py:247: AssertionError
=========================== short test summary info ============================
FAILED tests/test_MB_dist_basic.py::test_MDSimulation_advance_with_collision
FAILED tests/test_MB_dist_basic.py::test_MDSimulation_reaction - assert 2 == 1
========================= 2 failed, 11 passed in 0.83s =========================
